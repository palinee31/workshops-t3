name: Build and Deploy T3 App

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build T3 App
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/workshop-t3:latest
            ${{ secrets.DOCKER_USERNAME }}/workshop-t3:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/workshop-t3:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/workshop-t3:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Raspberry Pi
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.RASPI_HOST }}
          username: ${{ secrets.RASPI_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to project directory
            cd ~/workshop-ku/t3-app
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/workshop-t3:latest
            
            # Update docker-compose to use new image
            sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/workshop-t3:latest|' docker-compose.yml
            
            # Stop old containers
            docker-compose down
            
            # Start new containers
            docker-compose up -d
            
            # Clean up old images
            docker image prune -af --filter "until=48h"
            
            # Show status
            echo "Deployment complete!"
            docker-compose ps
            docker-compose logs --tail=20

      - name: Health Check
        run: |
          sleep 10
          curl -f https://workshop-devops.devphoom-kup.com || echo "Health check failed"